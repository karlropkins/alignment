// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_alignment_RCPPEXPORTS_H_GEN_
#define RCPP_alignment_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace alignment {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("alignment", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("alignment", "_alignment_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in alignment");
            }
        }
    }

    inline NumericMatrix C_InterpCoeff(NumericVector n, NumericVector nprime, NumericVector offs, CharacterVector rtn) {
        typedef SEXP(*Ptr_C_InterpCoeff)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_C_InterpCoeff p_C_InterpCoeff = NULL;
        if (p_C_InterpCoeff == NULL) {
            validateSignature("NumericMatrix(*C_InterpCoeff)(NumericVector,NumericVector,NumericVector,CharacterVector)");
            p_C_InterpCoeff = (Ptr_C_InterpCoeff)R_GetCCallable("alignment", "_alignment_C_InterpCoeff");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_C_InterpCoeff(Shield<SEXP>(Rcpp::wrap(n)), Shield<SEXP>(Rcpp::wrap(nprime)), Shield<SEXP>(Rcpp::wrap(offs)), Shield<SEXP>(Rcpp::wrap(rtn)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericMatrix >(rcpp_result_gen);
    }

    inline List C_cow(NumericVector Ta, NumericVector X, NumericVector Seg, NumericVector Slack, NumericVector Options) {
        typedef SEXP(*Ptr_C_cow)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_C_cow p_C_cow = NULL;
        if (p_C_cow == NULL) {
            validateSignature("List(*C_cow)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
            p_C_cow = (Ptr_C_cow)R_GetCCallable("alignment", "_alignment_C_cow");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_C_cow(Shield<SEXP>(Rcpp::wrap(Ta)), Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(Seg)), Shield<SEXP>(Rcpp::wrap(Slack)), Shield<SEXP>(Rcpp::wrap(Options)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List C_cow2(NumericVector Ta, NumericMatrix X, NumericVector Seg, NumericVector Slack, NumericVector Options) {
        typedef SEXP(*Ptr_C_cow2)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_C_cow2 p_C_cow2 = NULL;
        if (p_C_cow2 == NULL) {
            validateSignature("List(*C_cow2)(NumericVector,NumericMatrix,NumericVector,NumericVector,NumericVector)");
            p_C_cow2 = (Ptr_C_cow2)R_GetCCallable("alignment", "_alignment_C_cow2");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_C_cow2(Shield<SEXP>(Rcpp::wrap(Ta)), Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(Seg)), Shield<SEXP>(Rcpp::wrap(Slack)), Shield<SEXP>(Rcpp::wrap(Options)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline NumericVector C_histc(NumericVector values, NumericVector edges) {
        typedef SEXP(*Ptr_C_histc)(SEXP,SEXP);
        static Ptr_C_histc p_C_histc = NULL;
        if (p_C_histc == NULL) {
            validateSignature("NumericVector(*C_histc)(NumericVector,NumericVector)");
            p_C_histc = (Ptr_C_histc)R_GetCCallable("alignment", "_alignment_C_histc");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_C_histc(Shield<SEXP>(Rcpp::wrap(values)), Shield<SEXP>(Rcpp::wrap(edges)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector C_ylagxCOR(NumericVector x, NumericVector y) {
        typedef SEXP(*Ptr_C_ylagxCOR)(SEXP,SEXP);
        static Ptr_C_ylagxCOR p_C_ylagxCOR = NULL;
        if (p_C_ylagxCOR == NULL) {
            validateSignature("NumericVector(*C_ylagxCOR)(NumericVector,NumericVector)");
            p_C_ylagxCOR = (Ptr_C_ylagxCOR)R_GetCCallable("alignment", "_alignment_C_ylagxCOR");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_C_ylagxCOR(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(y)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

}

#endif // RCPP_alignment_RCPPEXPORTS_H_GEN_
